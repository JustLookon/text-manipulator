{"version":3,"sources":["components/Navbar1.js","components/Alert.js","App.js","reportWebVitals.js","components/About.js","index.js"],"names":["Navbar","props","setColor","color","mode","document","body","style","backgroundColor","console","log","React","createElement","className","concat","role","onClick","type","toggle","id","htmlFor","Alert","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","Capital1stChar","msg","App","text","setText","useState","setAlert","setMode","showAlert","message","setTimeout","Fragment","ToggleSwitch","transitionDuration","placeholder","value","onChange","e","target","rows","handleUpClick","newText","handleLowClick","clearText","split","length","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","About","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.65b844dd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n  const InDarkMode = () => {\r\n    if (props.mode === \"dark\") {\r\n      return \"visible\";\r\n    } else {\r\n      return \"hidden\";\r\n    }\r\n  };\r\n  const setColor = (color) => () => {\r\n    if (props.mode === \"dark\") {\r\n      document.body.style.backgroundColor = color;\r\n    }\r\n    console.log(\"running setColor function!\");\r\n  };\r\n  return (\r\n    <div\r\n      className={`flex justify-between px-3 bg-${props.mode} transition-all `}\r\n    >\r\n      <nav className={`navbar navbar-${props.mode} `}>\r\n        <div className=\"container-fluid\">\r\n          <nav className=\"navbar-brand\">Navbar</nav>\r\n          <form className=\"d-flex\" role=\"search\"></form>\r\n        </div>\r\n      </nav>\r\n      <div className=\"flex gap-4\">\r\n        <div className={` my-auto [&>*]:mx-2   ${InDarkMode()}`}>\r\n          <button\r\n            className=\"rounded-full p-[12px] bg-[#6b1c1c]\"\r\n            onClick={setColor(\"#6b1c1c\")}\r\n          ></button>\r\n          <button\r\n            className=\"rounded-full p-[12px] bg-[#652e18]\"\r\n            onClick={setColor(\"#652e18\")}\r\n          ></button>\r\n          <button\r\n            className=\"rounded-full p-[12px] bg-[#0b0e3b]\"\r\n            onClick={setColor(\"#0b0e3b\")}\r\n          ></button>\r\n          <button\r\n            className=\"rounded-full p-[12px] bg-[#010401]\"\r\n            onClick={setColor(\"#010401\")}\r\n          ></button>\r\n          <button\r\n            className=\"rounded-full p-[12px] bg-[#0b530b]\"\r\n            onClick={setColor(\"#0b530b\")}\r\n          ></button>\r\n        </div>\r\n        <div className=\"form-check form-switch my-auto\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            onClick={props.toggle}\r\n            role=\"switch\"\r\n            id=\"flexSwitchCheckDefault\"\r\n          />\r\n          <label\r\n            className={`form-check-label text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n            htmlFor=\"flexSwitchCheckDefault\"\r\n          >\r\n            Enable Dark Mode\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  const Capital1stChar=(word)=>{\r\n    let lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    props.alert &&<div>\r\n      <div className=\"alert alert-success\" role=\"alert\">\r\n        <strong>{Capital1stChar(props.alert.type)}</strong> : {props.alert.msg}\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./index.css\";\nimport Navbar from \"./components/Navbar1\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [alert, setAlert] = useState(null);\n  const [mode, setMode] = useState(\"light\");\n  const showAlert = (type, message) => {\n    setAlert({\n      type: type,\n      msg: message,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  function handleOnClick(e) {\n    const newText = setText(e.target.value);\n  }\n\n  const handleUpClick = () => {\n    const newText = text.toUpperCase();\n    setText(newText);\n    showAlert(\"success\", \"Text has been in upper case!\");\n  };\n  const handleLowClick = () => {\n    const newText = text.toLowerCase();\n    setText(newText);\n    showAlert(\"success\", \"Text has been in lower case!\");\n  };\n  const clearText = () => {\n    setText(\"\");\n    showAlert(\"success\", \"Text has been cleared!\");\n  };\n  const ToggleSwitch = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#0b0e3b\";\n      document.body.style.color = \"white\";\n      document.body.style.transitionDuration = \"150ms\";\n      showAlert(\"success\", \"Dark Mode has been enabled!\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      document.body.style.transitionDuration = \"150ms\";\n      showAlert(\"success\", \"Light Mode has been enabled!\");\n    }\n  };\n  return (\n    <>\n      <div className=\"flex flex-col pb-4\">\n        <Navbar mode={mode} toggle={ToggleSwitch} />\n        <Alert alert={alert} />\n        <div className=\"  w-[70vw] mx-auto my-7\">\n          <textarea\n            className=\"form-control transition-all\"\n            placeholder={`Type your text here`}\n            value={text}\n            onChange={handleOnClick}\n            id=\"floatingTextarea2\"\n            rows={\"7\"}\n            style={{\n              backgroundColor: mode === \"dark\" ? \"grey\" : \"white\",\n              color: mode === \"dark\" ? \"white\" : \"black\",\n            }}\n          ></textarea>\n          <button\n            className=\" mx-2 p-2 bg-blue-500 text-white my-4 rounded-sm \"\n            onClick={handleUpClick}\n          >\n            Capitalize your text\n          </button>\n          <button\n            className=\" mx-2 p-2 bg-blue-500 text-white my-4 rounded-sm \"\n            onClick={handleLowClick}\n          >\n            Lowerize your text\n          </button>\n          <button\n            className=\" mx-2 p-2 bg-blue-500 text-white my-4 rounded-sm \"\n            onClick={clearText}\n          >\n            Clear your text\n          </button>\n\n          <div className=\"border p-4 rounded-md\">\n            <h2 className=\"font-medium text-3xl m-2\">Text details</h2>\n            words = {text === \"\" ? 0 : text.split(\" \").length} <br />\n            character = {text.length} <br />\n            Minutes to read the above text ={\" \"}\n            {text.split(\" \").length * 0.00420168067}\n          </div>\n          <div className=\"border p-4 rounded-md my-5\">\n            <h2 className=\"font-medium text-3xl m-2\">Preview</h2>\n            {text.length > 0 ? text : \"Enter your text above to preview here\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\nexport default function About() {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport About from './components/About';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n    <About/>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}